package de.rbsulm.rbs_lf12.controllers;

import de.rbsulm.rbs_lf12.model.CalendarCategory;
import de.rbsulm.rbs_lf12.model.CalendarEvent;
import de.rbsulm.rbs_lf12.model.ThymeCalendarEvent;
import de.rbsulm.rbs_lf12.model.User;
import de.rbsulm.rbs_lf12.mysql.CalendarCategoryRepository;
import de.rbsulm.rbs_lf12.mysql.CalendarEventRepository;
import de.rbsulm.rbs_lf12.mysql.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.List;
import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/calendarEvent") // This means URL's start with /calendarEvent (after Application path)
public class CalendarEventController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private CalendarEventRepository calendarEventRepository;
  @Autowired
  private CalendarCategoryRepository calendarCategoryRepository;
  @Autowired
  private UserRepository userRepository;

  @GetMapping("/show")
  public String calendarEvents(Model model) {
    final List<CalendarEvent> calendarEventList = calendarEventRepository.getCalendarEventsByStartDateAfter(new java.util.Date().getTime());
    HomeController.defaultSiteSetup(model, userRepository).addAttribute("events", calendarEventList.stream().map(ThymeCalendarEvent::new).toList());
    return "events";
  }
  /*@GetMapping(path = "/event/{id}")
  public String event(Model model, @PathVariable int id) {
    final Optional<CalendarEvent> user = calendarEventRepository.findById(id);
    user.ifPresent(value -> HomeController.defaultSiteSetup(model).addAttribute("event", value));
    return "event";
  }*/

  @GetMapping(path = "/edit/{id}")
  public String edit(Model model, @PathVariable int id) {
    final Optional<CalendarEvent> user = calendarEventRepository.findById(id);
    user.ifPresent(value -> HomeController.defaultSiteSetup(model, userRepository).addAttribute("user", value)
            .addAttribute("categories", calendarCategoryRepository.findAll()));
    return "editEvent";
  }
  @PostMapping(path = "/edit")
  public String edit(Model model, @ModelAttribute() CalendarEvent calendarEvent) {
    HomeController.defaultSiteSetup(model, userRepository).addAttribute("event", calendarEvent);
    calendarEventRepository.save(calendarEvent);
    return "editUserResult";
  }

  @GetMapping("/newEvent")
  public String newEvent(Model model){
    HomeController.defaultSiteSetup(model, userRepository).addAttribute("event", new ThymeCalendarEvent())
            .addAttribute("categories", calendarCategoryRepository.findAll());
    return "newEvent";
  }

  @PostMapping(path="/newEvent") // Map ONLY POST Requests
  public String NewEvent(@ModelAttribute ThymeCalendarEvent event, Model model) {
    final CalendarEvent newEvent = new CalendarEvent();
    final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
    newEvent.setTitle(event.getTitle());
    newEvent.setDescription(event.getDescription());
    newEvent.setLocation(event.getLocation());
    newEvent.setStartDate(LocalDateTime.parse(event.getStartDate().replace("T", " "), formatter).toEpochSecond(ZoneOffset.UTC) * 1000);
    newEvent.setCategory(event.getCategory());
    HomeController.defaultSiteSetup(model, userRepository).addAttribute("event", newEvent)
            .addAttribute("dateTime", event.getStartDate().replace("T" , " "));

    calendarEventRepository.save(newEvent);
    return "newEventResult";
  }
  @GetMapping("/newCategory")
  public String newCategory(Model model){
    HomeController.defaultSiteSetup(model, userRepository).addAttribute("category", new CalendarCategory());
    return "newCategory";
  }

  @PostMapping(path="/newCategory") // Map ONLY POST Requests
  public String newCategory(@ModelAttribute CalendarCategory category, Model model) {
    HomeController.defaultSiteSetup(model, userRepository).addAttribute("category", category);

    calendarCategoryRepository.save(category);
    return "newCategoryResult";
  }
}
